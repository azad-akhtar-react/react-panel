{"version":3,"sources":["../node_modules/react-feather/dist/icons/file-text.js","views/admin/auth/Profile.jsx"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","FileText","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","React","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","points","x1","y1","x2","y2","propTypes","PropTypes","string","oneOfType","number","displayName","UpdatePage","dispatch","useDispatch","useState","isLoading","setLoading","id","useParams","navigate","useNavigate","token","getToken","formValue","setFromValue","formValidation","yup","shape","name","required","email","phoneNumber","min","useForm","mode","resolver","yupResolver","reset","control","handleSubmit","setValue","errors","formState","handleUpdateData","data","e","input","userUpdateProfile","result","setProfileAgain","isRefresh","toast","success","getSingleData","userGetProfile","useEffect","timeoutId","setTimeout","clearTimeout","className","tag","onSubmit","values","every","field","md","sm","for","defaultValue","render","placeholder","invalid","message","onClick","history","back","type"],"mappings":"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","file":"static/js/11.52de4d9d.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar FileText = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"\n  }), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"14 2 14 8 20 8\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"16\",\n    y1: \"13\",\n    x2: \"8\",\n    y2: \"13\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"16\",\n    y1: \"17\",\n    x2: \"8\",\n    y2: \"17\"\n  }), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"10 9 9 9 8 9\"\n  }));\n});\nFileText.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nFileText.displayName = 'FileText';\nexport default FileText;","// ** React Imports\nimport React, { Fragment, useState, forwardRef, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useNavigate, useParams } from 'react-router-dom'\n\n// ** Third Party Components\nimport * as yup from 'yup'\nimport toast from 'react-hot-toast'\nimport { X, FileText } from 'react-feather'\nimport { useForm, Controller } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\n\n// ** Custom Components\nimport { getToken } from '../../../utility/AuthService'\n\n// ** Reactstrap Imports\nimport {\n    Row,\n    Col,\n    Card,\n    Form,\n    Input,\n    Label,\n    Button,\n    CardBody,\n    CardTitle,\n    CardHeader,\n    FormFeedback,\n    DropdownMenu,\n    DropdownItem,\n    DropdownToggle,\n    Toast,\n    Spinner,\n    UncontrolledButtonDropdown,\n    ListGroupItem,\n    ListGroup\n} from 'reactstrap'\n\n// Redux-Settings\nimport {\n    setProfileAgain,\n    selectProfileAgain,\n} from '../../../redux/slices/auth.Slice'\n\n// API-Service\nimport { userUpdateProfile, userGetProfile } from '../../../services/authService'\n\nconst UpdatePage = () => {\n    const dispatch = useDispatch()\n    const [isLoading, setLoading] = useState(false)\n    const { id } = useParams()\n    const [myFile, setFile] = useState({});\n    const [fileName, setFileName] = useState('');\n    const navigate = useNavigate()\n    const token = getToken()\n    const [formValue, setFromValue] = useState('');\n\n    const formValidation = yup.object().shape({\n        name: yup.string().required('Please enter name'),\n        email: yup.string().email().required('Please enter email'),\n        phoneNumber: yup.string().min(10).required('Please enter phone number'),\n    })\n\n    // ** Hooks\n    const {\n        reset,\n        control,\n        handleSubmit,\n        setValue,\n        formState: { errors }\n    } = useForm({\n        mode: 'onChange',\n        resolver: yupResolver(formValidation)\n    })\n    if (formValue.name) {\n        setValue('name', formValue.name)\n        setValue('email', formValue.email)\n        setValue('phoneNumber', formValue.phoneNumber)\n    }\n\n    const handleUpdateData = async (data, e) => {\n        setLoading(true)\n        // const formData = new FormData()\n        // if (myFile.name) {\n        //     formData.append('image', myFile)\n        // }\n\n        const input = {\n            name: data?.name,\n            email: data?.email,\n            phoneNumber: data?.phoneNumber,\n            id: formValue?.id\n        }\n        const result = await userUpdateProfile({ token }, input)\n        if (result?.data?.name) {\n            setLoading(false)\n            reset()\n            dispatch(setProfileAgain({ isRefresh: true }))\n            toast.success('Profile updated successfully')\n            navigate('/');\n        } else {\n            setLoading(false)\n            // toast.success(\"Profile updated successfully\" )\n        }\n        return false\n    }\n\n    const onSubmit = data => {\n        if (Object.values(data).every(field => field.length > 0)) {\n            handleUpdateData(data)\n        } else {\n            // console.log('validation Error')\n        }\n    }\n\n    const handleBack = () => {\n        history.back()\n    }\n\n    // const selectImage = async (event) => {\n    //     const myData = event.target.files[0]\n    //     const fileName = event.target.files[0].name;\n    //     console.log(myData)\n    //     setFile(myData)\n    //     setFileName(fileName)\n    // }\n\n    const renderFilePreview = () => {\n        // myFile.type.startsWith('image')\n        if (myFile.name) {\n            return <img className='rounded' alt={myFile.name} src={URL.createObjectURL(myFile)} height='28' width='28' />\n        } else {\n            return <FileText size='28' />\n        }\n    }\n\n    const handleRemoveFile = () => {\n        // const uploadedFiles = myFile\n        // const filtered = uploadedFiles.filter(i => i.name !== file.name)\n        setFile(null)\n    }\n    const renderFileSize = size => {\n        if (Math.round(size / 100) / 10 > 1000) {\n            return `${(Math.round(size / 100) / 10000).toFixed(1)} mb`\n        } else {\n            return `${(Math.round(size / 100) / 10).toFixed(1)} kb`\n        }\n    }\n\n    const getSingleData = async () => {\n        const result = await userGetProfile({ id, token });\n        if (result?.data?.name) {\n            setLoading(false);\n            setFromValue(result?.data)\n        } else {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        setLoading(true)\n        getSingleData()\n        const timeoutId = setTimeout(() => 3000)\n        return function cleanup() {\n            clearTimeout(timeoutId)\n        }\n    }, [])\n\n    if (isLoading) {\n        return (\n            <>\n                <Fragment>\n                    <Card>\n                        <div className='parent'>\n                            <div className='myHeight'>\n                                <Spinner color='success' />\n                            </div>\n                        </div>\n                    </Card>\n                </Fragment>\n            </>\n        )\n    }\n\n    return (\n        <>\n            <Fragment>\n                <Card>\n                    <CardHeader className='flex-md-row flex-column align-md-items-center align-items-start'>\n                        <CardTitle tag='h4'>Update Profile</CardTitle>\n                    </CardHeader>\n\n                    <CardBody>\n                        <Form onSubmit={handleSubmit(onSubmit)}>\n                            <Row>\n                                <Col md='6' sm='12' className='mb-1'>\n                                    <div className='mb-1'>\n                                        <Label className='form-label' for='name'>\n                                            Name\n                                        </Label>\n                                        <Controller\n                                            id='name'\n                                            name='name'\n                                            defaultValue=''\n                                            control={control}\n                                            render={({ field }) => <Input className=\"\" {...field} placeholder='Name' invalid={errors.name && true} />}\n                                        />\n                                        {errors.name && <FormFeedback>{errors.name.message}</FormFeedback>}\n                                    </div>\n                                </Col>\n                                <Col md='6' sm='12' className='mb-1'>\n                                    <div className='mb-1'>\n                                        <Label className='form-label' for='email'>\n                                            Email\n                                        </Label>\n                                        <Controller\n                                            id='email'\n                                            name='email'\n                                            defaultValue=''\n                                            control={control}\n                                            render={({ field }) => <Input className=\"\" {...field} placeholder='Email' invalid={errors.email && true} />}\n                                        />\n                                        {errors.email && <FormFeedback>{errors.email.message}</FormFeedback>}\n                                    </div>\n                                </Col>\n                                <Col md='6' sm='12' className='mb-1'>\n                                    <div className='mb-1'>\n                                        <Label className='form-label' for='phoneNumber'>\n                                            Phone Number\n                                        </Label>\n                                        <Controller\n                                            id='phoneNumber'\n                                            name='phoneNumber'\n                                            defaultValue=''\n                                            control={control}\n                                            render={({ field }) => <Input className=\"\" {...field} placeholder='Phone Number' invalid={errors.phoneNumber && true} />}\n                                        />\n                                        {errors.phoneNumber && <FormFeedback>{errors.phoneNumber.message}</FormFeedback>}\n                                    </div>\n                                </Col>\n                                {/* <Col md='6' sm='12' className='mb-1'>\n                                    <div className='mb-1'>\n                                        <Label className='form-label' for='image'>\n                                            Image\n                                        </Label>\n                                        <Controller\n                                            id='image'\n                                            name='image'\n                                            defaultValue=''\n                                            control={control}\n                                            render={({ field }) => <Input label=\"Select Photo\" type=\"file\" name=\"image\" accept=\"image/png, image/jpg, image/jpeg\" {...field} placeholder='Upload Image' invalid={errors.image && true } onChange={selectImage} /> }\n                                        />\n                                        {errors.image && <FormFeedback>{errors.image.message}</FormFeedback>}\n                                        <div style={{ marginTop: 0 }}>\n                                            <Input label=\"Select Photo\" type=\"file\" name=\"file\" accept=\"image/png, image/jpg, image/jpeg\" onChange={selectImage} />\n                                        </div>\n                                    </div>\n                                </Col>\n                                <Col md='12' sm='12' className='mb-4'>\n                                    <h4>Selected Image</h4>\n                                    {myFile.name ? (\n                                        <ListGroup className='my-2'>\n                                            <ListGroupItem key={`${myFile.name}`} className='d-flex align-items-center justify-content-between'>\n                                                <div className='file-details d-flex align-items-center'>\n                                                    <div className='file-preview me-1'>{renderFilePreview()}</div>\n                                                    <div>\n                                                        <p className='file-name mb-0'>{myFile.name}</p>\n                                                        <p className='file-size mb-0'>{renderFileSize(myFile.size)}</p>\n                                                    </div>\n                                                </div>\n                                                <Button color='danger' outline size='sm' className='btn-icon' onClick={() => handleRemoveFile()}>\n                                                    <X size={14} />\n                                                </Button>\n                                            </ListGroupItem>\n                                        </ListGroup>\n                                    ) : (\n                                        <div className=\"logoImage\">\n                                            <img width=\"100\" src={`${formValue.photo}`} />\n                                        </div>\n                                    )}\n\n                                </Col> */}\n                                <Col sm='12'>\n                                    <div className='d-flex'>\n                                        <Button className='me-1' color='dark' onClick={handleBack}>\n                                            Cancel\n                                        </Button>\n                                        <Button className='me-1' color='success' type='submit'>\n                                            {isLoading ? <Spinner color='light' size='sm' /> : 'Save'}\n                                        </Button>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Form>\n                    </CardBody>\n                </Card>\n            </Fragment>\n        </>\n\n    )\n}\nexport default UpdatePage\n"],"sourceRoot":""}