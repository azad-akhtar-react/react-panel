{"version":3,"sources":["services/widgetService.js","views/admin/dashboard/addWdiget.jsx","views/admin/dashboard/cloud-risk-chart.js","views/admin/home.jsx"],"names":["baseUrl","process","widgetListService","token","axios","get","headers","Authorization","Accept","addWidgetService","input","post","widgetDelete","id","delete","AddWidgetPage","dispatch","useDispatch","getToken","useState","isLoading","setLoading","canvasOpen","setCanvasOpen","canvasScroll","setCanvasScroll","canvasBackdrop","setCanvasBackdrop","formValidation","yup","shape","widgetOne","required","widgetTwo","useForm","mode","resolver","yupResolver","defaultValues","reset","control","handleSubmit","errors","formState","toggleCanvasScroll","handleCreateData","data","e","name","catch","error","toast","success","response","message","result","console","log","setFreshList","color","onClick","className","size","scrollable","backdrop","direction","isOpen","toggle","onSubmit","Object","values","every","field","length","md","sm","for","defaultValue","render","autoComplete","placeholder","invalid","style","height","xs","type","ApexRadiarChart","options","legend","show","position","labels","colors","dataLabels","enabled","formatter","val","parseInt","plotOptions","pie","donut","fontSize","fontFamily","value","fontWeight","total","label","sum","config","series","reduce","accumulator","current","responsive","breakpoint","chart","HomePage"],"mappings":"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","file":"static/js/10.478820d2.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = process.env.REACT_APP_API_BASEURL\n\nexport const widgetListService = ({ token }) => axios.get(`${baseUrl}/clouds`, {\n    headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: 'application/json'\n    }\n})\n\nexport const widgetSearchListService = ({ searchValue, token }) => axios.get(`${baseUrl}/clouds?q=${searchValue}`, {\n    headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: 'application/json'\n    }\n})\n\nexport const addWidgetService = ({ token }, input) => axios.post(\n    `${baseUrl}/clouds`, input,\n    {\n        headers: {\n            Authorization: `Bearer ${token}`,\n            // Accept: 'multipart/form-data'\n            Accept: 'application/json'\n        }\n    }\n)\n\nexport const widgetDelete = ({ id, token }) => axios.delete(\n    `${baseUrl}/clouds/${id}`,\n    {\n        headers: {\n            Authorization: `Bearer ${token}`,\n            Accept: 'application/json'\n        }\n    }\n)","\n// ** React Imports\nimport React, { Fragment, useState, forwardRef, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useNavigate } from 'react-router-dom'\n\n// ** Third Party Components\nimport * as yup from 'yup'\nimport toast from 'react-hot-toast'\nimport { useForm, Controller } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\n\n// Utility-Service\nimport { getToken } from '../../../utility/AuthService'\n\nimport { Plus } from 'react-feather'\nimport {\n    Button, Offcanvas, OffcanvasHeader, OffcanvasBody, Card, CardHeader, CardBody, CardTitle, CardText, CardLink, Row,\n    Col,\n    Form,\n    Input,\n    Label,\n    Toast,\n    FormFeedback,\n    Spinner\n} from 'reactstrap'\n\nimport { setFreshList, setCategoryList, setWidgetList, selectWidgetList, selectCategoryList, selectFreshData } from '../../../redux/slices/cloudSlice'\nimport { addWidgetService } from '../../../services/widgetService'\n\nconst AddWidgetPage = () => {\n    const dispatch = useDispatch()\n    // const catList = useSelector(selectCategoryList)\n    const token = getToken()\n    const [isLoading, setLoading] = useState(false)\n    const [canvasOpen, setCanvasOpen] = useState(false)\n    const [canvasScroll, setCanvasScroll] = useState(false)\n    const [canvasBackdrop, setCanvasBackdrop] = useState(true)\n\n    const formValidation = yup.object().shape({\n        widgetOne: yup.string().required('Please enter widget name'),\n        widgetTwo: yup.string().required('Please enter widget name'),\n    })\n\n    // ** Hooks\n    const {\n        reset,\n        control,\n        handleSubmit,\n        formState: { errors }\n    } = useForm(\n        { mode: 'onChange', resolver: yupResolver(formValidation) },\n        { defaultValues: { widgetOne: '', widgetTwo: '' } },\n    )\n\n    // const handleCreateData = async (data, e) => {\n\n    //     setLoading(true)\n    //     const input = {\n    //         widgetOne: data?.widgetOne,\n    //         widgetTwo: data?.widgetTwo,\n    //     }\n    //     console.log('Check Input Data', catList, input)\n    //     setLoading(false)\n    //     catList.push(input)\n    //     dispatch(setCategoryList(catList))\n    //     dispatch(setWidgetList(input))\n    //     reset({ widgetOne: '', widgetTwo: '' })\n    //     toast.success('Widget added successfully')\n    //     setFreshList(true)\n    // }\n\n    const toggleCanvasScroll = () => {\n        setCanvasScroll(true)\n        setCanvasOpen(!canvasOpen)\n        reset()\n    }\n\n    const toggleCanvasBackdrop = () => {\n        setCanvasBackdrop(false)\n        setCanvasOpen(!canvasOpen)\n    }\n\n    const cancelledWidget = () => {\n        toggleCanvasScroll()\n        // setCanvasOpen(!canvasOpen)\n        reset()\n    }\n\n    const handleCreateData = async (data, e) => {\n        setLoading(true)\n        const input = {\n            name: data?.widgetOne,\n        }\n        const result = await addWidgetService({ token }, input).catch((error) => {\n            setLoading(false)\n            toast.success(error.response.data.message)\n        });\n        console.log('result', result)\n\n        if (result) {\n            setLoading(false)\n            reset({ widgetOne: '', widgetTwo: '' })\n            toast.success('Widget added successfully')\n            dispatch(setFreshList(true))\n            toggleCanvasBackdrop()\n\n        } else {\n            setLoading(false)\n            // toast.success(result?.data?.errorMessage)\n        }\n        return false\n\n    }\n\n    const onSubmit = data => {\n        if (Object.values(data).every(field => field.length > 0)) {\n            handleCreateData(data)\n        } else {\n            console.log('error')\n        }\n    }\n\n    return (\n        <div>\n            <div>\n                <Button\n                    color=\"dark\"\n                    onClick={toggleCanvasScroll}\n                    className='addWidgetButton'\n                >\n                    <Plus size={15} /> Add Widget\n                </Button>\n\n                <Offcanvas\n                    scrollable={canvasScroll}\n                    backdrop={canvasBackdrop}\n                    direction='end'\n                    className='addFormHeader'\n                    isOpen={canvasOpen}\n                    toggle={toggleCanvasScroll}\n                >\n                    <OffcanvasHeader className='addForm' toggle={toggleCanvasScroll}>\n                        Add Widget\n                    </OffcanvasHeader>\n                    <OffcanvasBody>\n                        <>\n                            <Form onSubmit={handleSubmit(onSubmit)}>\n                                <Row>\n                                    <Col md='12' sm='12' className=''>\n                                        <div className='mb-1'>\n                                            <Label className='form-label' for='name'>\n                                                Widget Two Name\n                                            </Label>\n                                            <Controller\n                                                id='name'\n                                                name='widgetOne'\n                                                defaultValue=''\n                                                control={control}\n                                                render={({ field }) => <Input autoComplete='off' className=\"myCapitalized\" {...field} placeholder='Widget Name' invalid={errors.widgetOne && true} />}\n                                            />\n                                            {errors.widgetOne && <FormFeedback>{errors.widgetOne.message}</FormFeedback>}\n                                        </div>\n                                    </Col>\n\n                                    <Col md='12' sm='12' className=''>\n                                        <div className='mb-1'>\n                                            <Label className='form-label' for='name'>\n                                                Widget Two Name\n                                            </Label>\n                                            <Controller\n                                                id='name'\n                                                name='widgetTwo'\n                                                defaultValue=''\n                                                control={control}\n                                                render={({ field }) => <Input autoComplete='off' className=\"myCapitalized\" {...field} placeholder='Widget Name' invalid={errors.widgetTwo && true} />}\n                                            />\n                                            {errors.widgetTwo && <FormFeedback>{errors.widgetTwo.message}</FormFeedback>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <div className=\"\" style={{ height: '100vh' }}>\n                                    <Row>\n\n                                        <Col xs={12} className='text-right pt-50 pos'>\n                                            <Button\n                                                color='secondary'\n                                                className='me-1'\n                                                onClick={()=> cancelledWidget()}\n                                            // onClick={() => {\n                                            //     setShow(!show)\n                                            //     reset()\n                                            // }}\n                                            >\n                                                Cancel\n                                            </Button>\n                                            <Button type='submit' color='primary'>\n                                                {isLoading ? <Spinner color='light' size='sm' /> : 'Confirm'}\n                                            </Button>\n\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </Form>\n                        </>\n                    </OffcanvasBody>\n                </Offcanvas>\n            </div>\n        </div>\n    )\n}\n\nexport default AddWidgetPage\n","// ** Third Party Components\nimport Chart from 'react-apexcharts'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, CardBody, CardSubtitle } from 'reactstrap'\n\nconst ApexRadiarChart = () => {\n  const donutColors = {\n    series1: '#d00505fc',\n    series2: '#ffe700',\n    series3: '#d3d3d3',\n    series4: '#008000',\n    series5: '#FFA1A1'\n  }\n\n\n  // ** Chart Series\n  const series = [7253, 36, 681, 1689]\n\n  // ** Chart Options\n  const options = {\n    legend: {\n      show: true,\n      position: 'right'\n    },\n    labels: ['Passed (7253)', 'Warning (681)', 'Not Available (36)', 'Failed (1689)'],\n    // labels: ['Passed', 'Warning', 'Not Available', 'Failed'],\n\n    colors: [donutColors.series4, donutColors.series3, donutColors.series2, donutColors.series1],\n    dataLabels: {\n      enabled: false,\n      formatter(val) {\n        return `${parseInt(val)}`\n      }\n    },\n    plotOptions: {\n      pie: {\n        donut: {\n          labels: {\n            show: true,\n            name: {\n              fontSize: '0.5rem',\n              fontFamily: 'Montserrat'\n            },\n            value: {\n              fontSize: '0.7rem',\n              fontWeight: 'bold',\n              fontFamily: 'Montserrat',\n              formatter(val) {\n                return `${parseInt(val)}`\n              }\n            },\n            total: {\n              show: true,\n              fontSize: '0.8rem',\n              // fontWeight: 'bold',\n              position: 'top',\n              label: 'Total',\n              formatter(val) {\n                // console.log('JustAdd', val?.config?.series)\n                const sum = val?.config?.series.reduce((accumulator, current) => accumulator + current);\n                return `${parseInt(sum)}`\n              }\n            }\n          }\n        }\n      }\n    },\n    responsive: [\n      {\n        breakpoint: 992,\n        options: {\n          chart: {\n            height: 380\n          },\n          legend: {\n            position: 'bottom'\n          }\n        }\n      },\n      {\n        breakpoint: 576,\n        options: {\n          chart: {\n            height: 320\n          },\n          plotOptions: {\n            pie: {\n              donut: {\n                labels: {\n                  show: true,\n                  name: {\n                    fontSize: '1rem'\n                  },\n                  value: {\n                    fontSize: '1rem'\n                  },\n                  total: {\n                    fontSize: '1.5rem'\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    ]\n  }\n\n  return (\n    <>\n    <div>\n    <Chart options={options} series={series} type='donut' height={230} />\n    </div>\n    </>\n  )\n}\n\nexport default ApexRadiarChart\n","// ** React Imports\nimport React, { Fragment, useState, forwardRef, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport {\n    Card, CardHeader, CardBody, CardTitle, CardText, CardLink, Row, Container, Col, Button, Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter\n} from 'reactstrap'\nimport { Delete } from 'react-feather'\n\nimport AddWidget from '././dashboard/addWdiget'\nimport CloudRisk from '././dashboard/cloud-risk-chart'\n\nconst HomePage = () => {\n\n    return (\n        <>\n            <Container>\n                {/* <Row className='mb-2'>\n                    <Col md='6'>\n                        <h3>CSPM Executive Dashboard</h3>\n                    </Col>\n                    <Col md='6' >\n                        <div className=\"float-end\">\n                            <AddWidget />\n                        </div>\n\n                    </Col>\n                </Row> */}\n\n                <Row>\n                    <Col md='6' sm='12'>\n                        <Card>\n                            <CardHeader>\n                                <CardTitle>\n                                    <strong><h6 className='dark mb-0'>Cloud Risk Management</h6></strong>\n                                    {/* <div className=\"d-flex align-items-center justify-content-between\">\n                                        <div className=\"div\">\n                                            <strong><h6 className='dark mb-0'>Cloud Risk Management</h6></strong>\n                                        </div>\n                                        <div className=\"div float-end\">\n                                            <Delete className='cursor-pointer' size={15} onClick={() => handleDeleteModal(item)} />\n                                        </div>\n                                    </div> */}\n                                </CardTitle>\n                            </CardHeader>\n                            <CardBody>\n                                <CloudRisk />\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    )\n}\n\nexport default HomePage\n"],"sourceRoot":""}